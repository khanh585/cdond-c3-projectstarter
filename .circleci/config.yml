version: 2.1

orbs:
  slack: circleci/slack@4.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>> 

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
              cd backend
              npm install
              npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test Front-end
          command: |
            cd frontend
            npm i
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test Back-end
          command: |
            cd backend
            npm i
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan the Backend
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo [all] > inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --output text >> .circleci/ansible/inventory.txt
            exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

#   configure-infrastructure:
#     docker:
#       docker:
#       - image: amazon/aws-cli
#     steps:
#       - checkout
#       - add_ssh_keys:
#           fingerprints: ["06:55:19:5c:75:9c:0c:fa:5e:f0:ed:c4:2b:35:ec:76"]
#       - attach_workspace:
#           at: .
#       - run:
#           name: Install dependencies
#           working_directory: ./.circleci/ansible
#           command: |
#             apk add --update ansible
#             ansible --version
#       - run:
#           name: Configure server
#           working_directory: ./.circleci/ansible
#           command: |
#             pwd &&
#             ls -la
#             cat inventory
#             ansible-playbook -i inventory configure-server.yaml
#       - destroy_environment:
#           id: ${CIRCLE_WORKFLOW_ID:0:7}
#           when: on_fail
#   run-migrations:
#     docker:
#       docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - attach_workspace:
#           at: .
#       - run:
#           name: Install AWS CLI dependencies
#           working_directory: /tmp
#           command: |
#             sudo apt-get update && sudo apt-get install -yy less
#             curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#             unzip awscliv2.zip
#             sudo ./aws/install
#       - run:
#           name: Run migrations
#           working_directory: ./backend
#           command: |
#             npm run migrations > migration_status
#       - run:
#           name: Send migration results to memstash
#           working_directory: ./backend
#           command: |
#             if grep -q "has been executed successfully" migration_status
#             then
#               echo "DB migration was successful, will update memstash..."
#               curl -H "Content-Type: text/plain" -H "token: 2a9e15d6-b9fa-4b1f-a5dc-e3b9643a9b63" --request PUT --data "success" https://api.memstash.io/values/DB_MIGRATION_${CIRCLE_WORKFLOW_ID:0:7}
#             else
#               echo "DB migration failed, please verify setup! Probably the database already exists. Verify setup!"
#               curl -H "Content-Type: text/plain" -H "token: 2a9e15d6-b9fa-4b1f-a5dc-e3b9643a9b63" --request PUT --data "failure" https://api.memstash.io/values/DB_MIGRATION_${CIRCLE_WORKFLOW_ID:0:7}
#             fi
#             echo "WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}"
#       - destroy_environment:
#           id: ${CIRCLE_WORKFLOW_ID:0:7}
#           when: on_fail

#   deploy-frontend:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install AWS CLI dependencies
#           working_directory: /tmp
#           command: |
#             sudo apt-get update && sudo apt-get install -yy less
#             curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#             unzip awscliv2.zip
#             sudo ./aws/install
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#       - run:
#           name: Deploy frontend objects to S3
#           working_directory: ./frontend
#           command: |
#             aws s3 cp ./dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
#       - destroy_environment:
#           id: ${CIRCLE_WORKFLOW_ID:0:7}
#           when: on_fail
                    
#   deploy-backend:
#     docker:
#       - image: python:3.9.0-alpine
#     steps:
#       - checkout
#       - add_ssh_keys:
#           fingerprints: ["06:55:19:5c:75:9c:0c:fa:5e:f0:ed:c4:2b:35:ec:76"]
#       - attach_workspace:
#           at: .
#       - run:
#           name: Install dependencies
#           working_directory: /tmp
#           command: |
#             apk add --update ansible curl rsync openssh nodejs npm
#             ansible --version
#             pip install awscli
#             aws --version
#       - run:
#           name: Deploy backend
#           working_directory: ./.circleci/ansible
#           command: |
#             cat inventory
#             ansible-playbook -i inventory deploy-server.yaml -vv
#       - destroy_environment:
#           id: ${CIRCLE_WORKFLOW_ID:0:7}
#           when: on_fail

#   smoke-test:
#     docker:
#       - image: alpine:latest
#     steps:
#       - checkout
#       - run:
#           name: Install dependencies
#           working_directory: /tmp
#           command: |
#             apk add --update curl nodejs npm
#             pip install awscli
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           working_directory: ./backend
#           command: |
#             export BACKEND_URL=$(curl -H "token: 1e288415-cfc8-4a0a-a23c-087eb7cd7678" --request GET https://api.memstash.io/values/BACKEND_URL)
#             curl "$BACKEND_URL/api/status"
#       - run:
#           name: Frontend smoke test.
#           working_directory: ./backend
#           command: |
#             URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.eu-central-1.amazonaws.com/index.html"
#             curl -s ${URL} | grep -q "Welcome"
#       - destroy_environment:
#           id: ${CIRCLE_WORKFLOW_ID:0:7}
#           when: on_fail
#   cloudfront-update:
#     docker:
#       - image: amazon/aws-cli
#     steps:
#       - checkout
#       - run:
#           name: Install dependencies
#           command: |
#             yum install -y tar gzip curl
#             curl -sL https://rpm.nodesource.com/setup_10.x | bash -
#             yum install -y nodejs
#       - run:
#           name: Update cloudfront distribution
#           working_directory: ./.circleci/files
#           command: |
#             aws cloudformation deploy \
#               --template-file cloudfront.yaml \
#               --stack-name udapeople-cloudfront-production \
#               --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
#               --tags project=udapeople  

# cleanup:
#     docker:
#       - image: amazon/aws-cli
#     steps:
#       - checkout
#       - run:
#           name: Get old stack workflow id
#           command: |
#             export OldWorkflowID=$(curl -H "token: 1513db3b-15be-4750-bae6-3a8d32dd6de2" --request GET https://api.memstash.io/values/WorkflowID)
#             CurrentWorkflowID=${CIRCLE_WORKFLOW_ID:0:7}
#             export OldWorkflowID="the id here"
#             export STACKS=[${CIRCLE_WORKFLOW_ID:0:7}]
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               echo "$OldWorkflowID!=$CurrentWorkflowID => will delete old version"
#               aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
#               aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
#               aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure:
          requires: [build-frontend, build-backend]
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [test-feature-branch]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]